$date
Thu Nov 21 01:17:37 2024
$end
$version
Riviera-PRO Version 2023.04.112.8911
$end
$timescale
1 ns
$end

$scope module tb $end

$scope module aif $end
$var reg 4 ! a [3:0] $end
$var reg 4 " b [3:0] $end
$var reg 5 # y [4:0] $end
$upscope $end


$scope module dut $end
$var wire 4 $ a [3:0] $end
$var wire 4 % b [3:0] $end
$var wire 5 & y [4:0] $end
$upscope $end

$upscope $end


$scope module uvm_pkg $end
$var integer 32 ' UVM_UNBOUNDED_CONNECTIONS $end
$var reg 1 ( uvm_start_uvm_declarations $end
$var integer 32 ) uvm_global_random_seed $end
$var parameter 32 * UVM_HDL_MAX_WIDTH [31:0] $end
$var parameter 32 + UVM_STREAMBITS [31:0] $end
$var parameter 32 , UVM_RADIX [31:0] $end
$var parameter 32 - UVM_MACRO_NUMFLAGS [31:0] $end
$var parameter 32 . UVM_DEFAULT [31:0] $end
$var parameter 32 / UVM_ALL_ON [31:0] $end
$var parameter 32 0 UVM_FLAGS_ON [31:0] $end
$var parameter 32 1 UVM_FLAGS_OFF [31:0] $end
$var parameter 32 2 UVM_COPY [31:0] $end
$var parameter 32 3 UVM_NOCOPY [31:0] $end
$var parameter 32 4 UVM_COMPARE [31:0] $end
$var parameter 32 5 UVM_NOCOMPARE [31:0] $end
$var parameter 32 6 UVM_PRINT [31:0] $end
$var parameter 32 7 UVM_NOPRINT [31:0] $end
$var parameter 32 8 UVM_RECORD [31:0] $end
$var parameter 32 9 UVM_NORECORD [31:0] $end
$var parameter 32 : UVM_PACK [31:0] $end
$var parameter 32 ; UVM_NOPACK [31:0] $end
$var parameter 32 < UVM_PHYSICAL [31:0] $end
$var parameter 32 = UVM_ABSTRACT [31:0] $end
$var parameter 32 > UVM_READONLY [31:0] $end
$var parameter 32 ? UVM_NODEFPRINT [31:0] $end
$var parameter 32 @ UVM_MACRO_EXTRAS [31:0] $end
$var parameter 32 A UVM_FLAGS [31:0] $end
$var parameter 32 B UVM_UNPACK [31:0] $end
$var parameter 32 C UVM_CHECK_FIELDS [31:0] $end
$var parameter 32 D UVM_END_DATA_EXTRA [31:0] $end
$var parameter 32 E UVM_START_FUNCS [31:0] $end
$var parameter 32 F UVM_SET [31:0] $end
$var parameter 32 G UVM_SETINT [31:0] $end
$var parameter 32 H UVM_SETOBJ [31:0] $end
$var parameter 32 I UVM_SETSTR [31:0] $end
$var parameter 32 J UVM_END_FUNCS [31:0] $end
$var parameter 32 K UVM_STR_CRC_POLYNOMIAL [31:0] $end
$var parameter 32 L UVM_STDOUT [31:0] $end
$var parameter 32 M UVM_LOG_UVM_RM_RECORD [31:0] $end
$var parameter 32 N UVM_LINE_WIDTH [31:0] $end
$var parameter 32 O UVM_NUM_LINES [31:0] $end
$var parameter 32 P UVM_SMALL_STRING [31:0] $end
$var parameter 32 Q UVM_LARGE_STRING [31:0] $end

$scope function uvm_hdl_check_path $end
$var integer 32 R uvm_hdl_check_path $end
$upscope $end


$scope function uvm_hdl_deposit $end
$var reg 1024 S value [1023:0] $end
$var integer 32 T uvm_hdl_deposit $end
$upscope $end


$scope function uvm_hdl_force $end
$var reg 1024 U value [1023:0] $end
$var integer 32 V uvm_hdl_force $end
$upscope $end


$scope task uvm_hdl_force_time $end
$var reg 1024 W value [1023:0] $end
$var time 64 X force_time $end
$upscope $end


$scope function uvm_hdl_release_and_read $end
$var reg 1024 Y value [1023:0] $end
$var integer 32 Z uvm_hdl_release_and_read $end
$upscope $end


$scope function uvm_hdl_release $end
$var integer 32 [ uvm_hdl_release $end
$upscope $end


$scope function uvm_hdl_read $end
$var reg 1024 \ value [1023:0] $end
$var integer 32 ] uvm_hdl_read $end
$upscope $end


$scope function uvm_dpi_get_next_arg_c $end
$var integer 32 ^ init $end
$upscope $end


$scope function uvm_dpi_get_tool_name_c $end
$upscope $end


$scope function uvm_dpi_get_tool_version_c $end
$upscope $end


$scope function uvm_dpi_get_next_arg $end
$var integer 32 _ init $end
$upscope $end


$scope function uvm_dpi_get_tool_name $end
$upscope $end


$scope function uvm_dpi_get_tool_version $end
$upscope $end


$scope function uvm_dpi_regcomp $end
$upscope $end


$scope function uvm_dpi_regexec $end
$var integer 32 ` uvm_dpi_regexec $end
$upscope $end


$scope function uvm_dpi_regfree $end
$upscope $end


$scope function uvm_re_match $end
$var integer 32 a uvm_re_match $end
$upscope $end


$scope function uvm_dump_re_cache $end
$upscope $end


$scope function uvm_glob_to_re $end
$upscope $end


$scope function uvm_revision_string $end
$upscope $end


$scope function uvm_radix_to_string $end
$var integer 32 b radix $end
$upscope $end


$scope function uvm_instance_scope $end
$var reg 8 c c [7:0] $end
$var integer 32 d pos $end

$scope begin 1unnblk $end
$var integer 32 e dot_pos $end
$var integer 32 f slash_cnt $end
$var integer 32 g slash_pos $end
$upscope $end

$upscope $end


$scope function uvm_oneway_hash $end
$var integer 32 h seed $end
$var integer 32 i uvm_oneway_hash $end
$var reg 1 j msb $end
$var reg 8 k current_byte [7:0] $end
$var reg 32 l crc1 [31:0] $end
$upscope $end


$scope function uvm_create_random_seed $end
$var integer 32 m uvm_create_random_seed $end
$upscope $end


$scope function uvm_object_value_str $end
$upscope $end


$scope function uvm_leaf_scope $end
$var reg 8 n scope_separator [7:0] $end
$var reg 8 o bracket_match [7:0] $end
$var integer 32 p pos $end
$var integer 32 q bmatches $end
$upscope $end


$scope function get_radix_string_global $end
$var integer 32 r radix $end
$upscope $end


$scope function uvm_bitstream_to_string $end
$var reg 4096 s value [4095:0] $end
$var integer 32 t size $end
$var integer 32 u radix $end

$scope begin 24unnblk $end
$var reg 4096 v _t [4095:0] $end
$upscope $end

$upscope $end


$scope function uvm_integral_to_string $end
$var reg 64 w value [63:0] $end
$var integer 32 x size $end
$var integer 32 y radix $end

$scope begin 26unnblk $end
$var reg 64 z _t [63:0] $end
$upscope $end

$upscope $end


$scope function uvm_vector_to_string $end
$var reg 4096 { value [4095:0] $end
$var integer 32 | size $end
$var integer 32 } radix $end
$upscope $end


$scope function uvm_get_array_index_int $end
$var reg 1 ~ is_wildcard $end
$var integer 32 !! uvm_get_array_index_int $end
$var integer 32 "! i $end
$upscope $end


$scope function uvm_get_array_index_string $end
$var reg 1 #! is_wildcard $end
$var integer 32 $! i $end
$upscope $end


$scope function uvm_is_array $end
$var reg 1 %! uvm_is_array $end
$upscope $end


$scope function uvm_has_wildcard $end
$upscope $end


$scope function m_uvm_string_queue_join $end
$upscope $end


$scope task run_test $end
$upscope $end


$scope function global_stop_request $end
$upscope $end


$scope function set_global_timeout $end
$var time 64 &! timeout $end
$var reg 1 '! overridable $end
$upscope $end


$scope function set_global_stop_timeout $end
$var time 64 (! timeout $end
$upscope $end


$scope function uvm_get_report_object $end
$upscope $end


$scope function uvm_report_enabled $end
$var integer 32 )! verbosity $end
$var reg 2 *! severity $end
$var integer 32 +! uvm_report_enabled $end
$upscope $end


$scope function uvm_report $end
$var reg 2 ,! severity $end
$var integer 32 -! verbosity $end
$var integer 32 .! line $end
$var reg 1 /! report_enabled_checked $end
$upscope $end


$scope function m__uvm_report_dpi $end
$var integer 32 0! severity $end
$var integer 32 1! verbosity $end
$var integer 32 2! line $end
$upscope $end


$scope function uvm_report_info $end
$var integer 32 3! verbosity $end
$var integer 32 4! line $end
$var reg 1 5! report_enabled_checked $end
$upscope $end


$scope function uvm_report_warning $end
$var integer 32 6! verbosity $end
$var integer 32 7! line $end
$var reg 1 8! report_enabled_checked $end
$upscope $end


$scope function uvm_report_error $end
$var integer 32 9! verbosity $end
$var integer 32 :! line $end
$var reg 1 ;! report_enabled_checked $end
$upscope $end


$scope function uvm_report_fatal $end
$var integer 32 <! verbosity $end
$var integer 32 =! line $end
$var reg 1 >! report_enabled_checked $end
$upscope $end


$scope function uvm_process_report_message $end
$upscope $end


$scope function uvm_string_to_severity $end
$var reg 2 ?! sev $end
$var reg 1 @! uvm_string_to_severity $end
$upscope $end


$scope function uvm_string_to_action $end
$upscope $end


$scope function set_config_int $end
$var reg 4096 A! value [4095:0] $end
$upscope $end


$scope function set_config_object $end
$var reg 1 B! clone $end
$upscope $end


$scope function set_config_string $end
$upscope $end


$scope function uvm_is_match $end
$var reg 1 C! uvm_is_match $end
$upscope $end


$scope function uvm_string_to_bits $end
$var reg 115200 D! uvm_string_to_bits [115199:0] $end
$upscope $end


$scope function uvm_bits_to_string $end
$var reg 115200 E! str [115199:0] $end
$upscope $end


$scope task uvm_wait_for_nba_region $end
$var integer 32 F! nba $end
$var integer 32 G! next_nba $end
$upscope $end


$scope function uvm_split_string $end
$upscope $end


$scope function uvm_hdl_concat2string $end
$upscope $end

$upscope $end


$scope module std $end

$scope function randomize $end
$var reg 1 H! randomize $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b1001 !
b0 "
b1001 #
b1001 $
b0 %
b1001 &
b11111111111111111111111111111111 '
1(
b1000011111110111011111100011111 )
b10000000000 *
b1000000000000 +
b1111000000000000000000000000 ,
b10001 -
b10101010101 .
b101010101 /
b101010101 0
b0 1
b1 2
b10 3
b100 4
b1000 5
b10000 6
b100000 7
b1000000 8
b10000000 9
b100000000 :
b1000000000 ;
b10000000000000 <
b100000000000000 =
b1000000000000000 >
b10000000000000000 ?
b100000000000000000 @
b100000000000000001 A
b100000000000000010 B
b100000000000000011 C
b100000000000000100 D
b100000000000000101 E
b100000000000000110 F
b100000000000000110 G
b100000000000000111 H
b100000000000001000 I
b100000000000001000 J
b100110000010001110110110110 K
b1 L
b1000010 M
b1111000 N
b1111000 O
b1110111111 P
b11100000111111111 Q
b0 R
bx S
b0 T
bx U
b0 V
bx W
bx X
bx Y
b0 Z
b0 [
bx \
b0 ]
b0 ^
b0 _
b0 `
b0 a
b0 b
b101110 c
b11011 d
b10001 e
b11 f
b11001 g
b1000011111110111011111100011111 h
b11100010111000110000001010110001 i
1j
b1110100 k
b1101101101111000001100001100001 l
b11110010000010010111101010101000 m
b0 n
b0 o
b0 p
b0 q
b0 r
bx s
b0 t
b0 u
bx v
bx w
b0 x
b0 y
bx z
bx {
b0 |
b0 }
0~
b0 !!
b0 "!
0#!
b0 $!
0%!
bx &!
0'!
bx (!
b111110100 )!
b0 *!
b0 +!
b0 ,!
b0 -!
b0 .!
0/!
b0 0!
b0 1!
b0 2!
b0 3!
b0 4!
05!
b0 6!
b0 7!
08!
b0 9!
b0 :!
0;!
b0 <!
b0 =!
0>!
b0 ?!
0@!
bx A!
0B!
0C!
bx D!
bx E!
b100100 F!
b100100 G!
0H!
$end
#10
b100101 G!
b100101 F!
b11100010111000110000001010110100 m
b110 !
b1001 "
b1001 %
b110 $
b1111 &
b1111 #
#20
b100110 G!
b100110 F!
b11100010111000110000001010110111 m
b0 !
b1011 "
b1011 %
b0 $
b1011 &
b1011 #
#30
b100111 G!
b100111 F!
b11100010111000110000001010111011 m
b111 !
b110 "
b110 %
b111 $
b1101 &
b1101 #
#40
b101000 G!
b101000 F!
b11100010111000110000001011000000 m
b1011 !
b1010 "
b1010 %
b1011 $
b10101 &
b10101 #
#50
b101001 G!
b101001 F!
b11100010111000110000001011000110 m
b1100 !
b111 "
b111 %
b1100 $
b10011 &
b10011 #
#60
b101010 G!
b101010 F!
b11100010111000110000001011001101 m
b1010 !
b1101 "
b1101 %
b1010 $
b10111 &
b10111 #
#70
b101011 G!
b101011 F!
b11100010111000110000001011010101 m
b101 !
b1100 "
b1100 %
b101 $
b10001 &
b10001 #
#80
b101100 G!
b101100 F!
b11100010111000110000001011011110 m
b1101 !
b100 "
b100 %
b1101 $
#90
b101101 G!
b101101 F!
b10 !
b101 "
b101 %
b10 $
b111 &
b111 #
#100
b110000 G!
b110000 F!
b110010 G!
b110010 F!
b10010001101011000101111111111011 m
b10010001101011000110000000001101 m
b10010001101011000110000000100000 m
b101010001111101000011001 m
b1100100 )!
b1 +!
b1100100 3!
b1101100101 4!
15!
